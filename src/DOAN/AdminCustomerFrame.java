package DOAN;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import MySQL.DatabaseConnection;

public class AdminCustomerFrame extends JFrame {
    private JTable table;
    private DefaultTableModel tableModel;
    private JButton btnAdd, btnEdit, btnDelete;
    private Connection conn;

    public AdminCustomerFrame() {
        setTitle("Qu·∫£n L√Ω Kh√°ch H√†ng - StarLight Cinema");
        setSize(900, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // K·∫øt n·ªëi database
        conn = DatabaseConnection.getConnection();

        // Ti√™u ƒë·ªÅ
        JLabel titleLabel = new JLabel("üìã Danh S√°ch Kh√°ch H√†ng", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 26));
        titleLabel.setForeground(new Color(0, 102, 204));
        add(titleLabel, BorderLayout.NORTH);

        // B·∫£ng kh√°ch h√†ng
        String[] columnNames = {"ID", "T√™n ƒêƒÉng Nh·∫≠p", "H·ªç T√™n", "Email", "SƒêT", "Gi·ªõi T√≠nh", "Ng√†y Sinh"};
        tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);
        table.setRowHeight(30);
        table.setFont(new Font("Arial", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        // N√∫t ch·ª©c nƒÉng
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));
        btnAdd = new JButton("‚ûï Th√™m");
        btnEdit = new JButton("‚úèÔ∏è S·ª≠a");
        btnDelete = new JButton("üóë X√≥a");

        buttonPanel.add(btnAdd);
        buttonPanel.add(btnEdit);
        buttonPanel.add(btnDelete);
        add(buttonPanel, BorderLayout.SOUTH);

        // Load d·ªØ li·ªáu t·ª´ database
        loadCustomers();

        // X·ª≠ l√Ω s·ª± ki·ªán
        btnAdd.addActionListener(e -> addCustomer());
        btnEdit.addActionListener(e -> editCustomer());
        btnDelete.addActionListener(e -> deleteCustomer());

        setVisible(true);
    }

    private void loadCustomers() {
        try {
            String sql = "SELECT id, ten_dang_nhap, ho_ten, email, so_dien_thoai, gioi_tinh, ngay_sinh FROM nguoi_dung";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            tableModel.setRowCount(0);

            while (rs.next()) {
                tableModel.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("ten_dang_nhap"),
                    rs.getString("ho_ten"),
                    rs.getString("email"),
                    rs.getString("so_dien_thoai"),
                    rs.getString("gioi_tinh"),
                    rs.getString("ngay_sinh")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addCustomer() {
        String username = JOptionPane.showInputDialog("Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p:");
        String name = JOptionPane.showInputDialog("Nh·∫≠p h·ªç t√™n:");
        String email = JOptionPane.showInputDialog("Nh·∫≠p email:");
        String phone = JOptionPane.showInputDialog("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i:");
        String gender = JOptionPane.showInputDialog("Nh·∫≠p gi·ªõi t√≠nh (Nam/N·ªØ):");
        String birthdate = JOptionPane.showInputDialog("Nh·∫≠p ng√†y sinh (YYYY-MM-DD):");

        if (username != null && name != null && email != null && phone != null && gender != null && birthdate != null) {
            try {
                String sql = "INSERT INTO nguoi_dung (ten_dang_nhap, ho_ten, email, so_dien_thoai, gioi_tinh, ngay_sinh) VALUES (?, ?, ?, ?, ?, ?)";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, username);
                stmt.setString(2, name);
                stmt.setString(3, email);
                stmt.setString(4, phone);
                stmt.setString(5, gender);
                stmt.setString(6, birthdate);

                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Th√™m kh√°ch h√†ng th√†nh c√¥ng!");
                loadCustomers();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "L·ªói khi th√™m kh√°ch h√†ng!");
            }
        }
    }

    private void editCustomer() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Ch·ªçn kh√°ch h√†ng c·∫ßn ch·ªânh s·ª≠a!");
            return;
        }

        int id = (int) table.getValueAt(selectedRow, 0);
        String newName = JOptionPane.showInputDialog("Nh·∫≠p h·ªç t√™n m·ªõi:", table.getValueAt(selectedRow, 2));
        String newEmail = JOptionPane.showInputDialog("Nh·∫≠p email m·ªõi:", table.getValueAt(selectedRow, 3));
        String newPhone = JOptionPane.showInputDialog("Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i m·ªõi:", table.getValueAt(selectedRow, 4));
        String newGender = JOptionPane.showInputDialog("Nh·∫≠p gi·ªõi t√≠nh m·ªõi (Nam/N·ªØ):", table.getValueAt(selectedRow, 5));
        String newBirthdate = JOptionPane.showInputDialog("Nh·∫≠p ng√†y sinh m·ªõi (YYYY-MM-DD):", table.getValueAt(selectedRow, 6));

        if (newName != null && newEmail != null && newPhone != null && newGender != null && newBirthdate != null) {
            try {
                String sql = "UPDATE nguoi_dung SET ho_ten=?, email=?, so_dien_thoai=?, gioi_tinh=?, ngay_sinh=? WHERE id=?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, newName);
                stmt.setString(2, newEmail);
                stmt.setString(3, newPhone);
                stmt.setString(4, newGender);
                stmt.setString(5, newBirthdate);
                stmt.setInt(6, id);

                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                loadCustomers();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "L·ªói khi c·∫≠p nh·∫≠t!");
            }
        }
    }

    private void deleteCustomer() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Ch·ªçn kh√°ch h√†ng c·∫ßn x√≥a!");
            return;
        }

        int id = (int) table.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this, "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a?", "X√°c nh·∫≠n", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String sql = "DELETE FROM nguoi_dung WHERE id=?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setInt(1, id);
                stmt.executeUpdate();

                JOptionPane.showMessageDialog(this, "X√≥a th√†nh c√¥ng!");
                loadCustomers();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "L·ªói khi x√≥a!");
            }
        }
    }
}
